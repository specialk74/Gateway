#############################################################################
# Makefile for building: Gateway
# Generated by qmake (2.01a) (Qt 4.8.5) on: Mon Nov 4 22:18:51 2013
# Project:  Gateway.pro
# Template: app
# Command: /opt/qt/bin/qmake -o Makefile Gateway.pro
#############################################################################

####### Compiler, tools and options

CC            = /usr/local/angstrom/arm/arm-angstrom-linux-gnueabi/bin/gcc
CXX           = /usr/local/angstrom/arm/arm-angstrom-linux-gnueabi/bin/g++
DEFINES       = -DQT_NETWORK_LIB -DQT_CORE_LIB -DQT_SHARED
CFLAGS        = -pipe -g -Wall -W -D_REENTRANT $(DEFINES)
CXXFLAGS      = -pipe -g -Wall -W -D_REENTRANT $(DEFINES)
INCPATH       = -I/opt/qt/mkspecs/qws/linux-am335x-g++ -I. -I/opt/qt/include/QtCore -I/opt/qt/include/QtNetwork -I/opt/qt/include -I/opt/qt/include/QtSerialPort -I.
LINK          = /usr/local/angstrom/arm/arm-angstrom-linux-gnueabi/bin/g++
LFLAGS        = -Wl,-rpath,/opt/qt/lib
LIBS          = $(SUBLIBS)  -L/opt/qt/lib -lQtSerialPort -lQtNetwork -L/opt/qt/lib -lQtCore -lpthread 
AR            = /usr/local/angstrom/arm/arm-angstrom-linux-gnueabi/bin/ar cqs
RANLIB        = 
QMAKE         = /opt/qt/bin/qmake
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -r
STRIP         = /usr/local/angstrom/arm/arm-angstrom-linux-gnueabi/bin/strip
INSTALL_FILE  = install -m 644 -p
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = install -m 755 -p
DEL_FILE      = rm -f
SYMLINK       = ln -f -s
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = ./

####### Files

SOURCES       = main.cpp \
		tcpgateway.cpp \
		clientoven.cpp \
		utils.cpp \
		abstractdevice.cpp \
		rs232device.cpp \
		rs232deviceprivate.cpp \
		candevice.cpp moc_tcpgateway.cpp \
		moc_clientoven.cpp \
		moc_abstractdevice.cpp \
		moc_rs232device.cpp \
		moc_rs232deviceprivate.cpp \
		moc_candevice.cpp
OBJECTS       = main.o \
		tcpgateway.o \
		clientoven.o \
		utils.o \
		abstractdevice.o \
		rs232device.o \
		rs232deviceprivate.o \
		candevice.o \
		moc_tcpgateway.o \
		moc_clientoven.o \
		moc_abstractdevice.o \
		moc_rs232device.o \
		moc_rs232deviceprivate.o \
		moc_candevice.o
DIST          = /opt/qt/mkspecs/common/unix.conf \
		/opt/qt/mkspecs/common/linux.conf \
		/opt/qt/mkspecs/common/gcc-base.conf \
		/opt/qt/mkspecs/common/gcc-base-unix.conf \
		/opt/qt/mkspecs/common/g++-base.conf \
		/opt/qt/mkspecs/common/g++-unix.conf \
		/opt/qt/mkspecs/common/qws.conf \
		/opt/qt/mkspecs/qconfig.pri \
		/opt/qt/mkspecs/features/qt_functions.prf \
		/opt/qt/mkspecs/features/qt_config.prf \
		/opt/qt/mkspecs/features/exclusive_builds.prf \
		/opt/qt/mkspecs/features/default_pre.prf \
		/opt/qt/mkspecs/features/debug.prf \
		/opt/qt/mkspecs/features/default_post.prf \
		/opt/qt/mkspecs/features/serialport.prf \
		/opt/qt/mkspecs/features/shared.prf \
		/opt/qt/mkspecs/features/warn_on.prf \
		/opt/qt/mkspecs/features/qt.prf \
		/opt/qt/mkspecs/features/unix/thread.prf \
		/opt/qt/mkspecs/features/moc.prf \
		/opt/qt/mkspecs/features/resources.prf \
		/opt/qt/mkspecs/features/uic.prf \
		/opt/qt/mkspecs/features/yacc.prf \
		/opt/qt/mkspecs/features/lex.prf \
		/opt/qt/mkspecs/features/include_source_dir.prf \
		Gateway.pro
QMAKE_TARGET  = Gateway
DESTDIR       = 
TARGET        = Gateway

first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o "$@" "$<"

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(OBJECTS)  
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)

Makefile: Gateway.pro  /opt/qt/mkspecs/qws/linux-am335x-g++/qmake.conf /opt/qt/mkspecs/common/unix.conf \
		/opt/qt/mkspecs/common/linux.conf \
		/opt/qt/mkspecs/common/gcc-base.conf \
		/opt/qt/mkspecs/common/gcc-base-unix.conf \
		/opt/qt/mkspecs/common/g++-base.conf \
		/opt/qt/mkspecs/common/g++-unix.conf \
		/opt/qt/mkspecs/common/qws.conf \
		/opt/qt/mkspecs/qconfig.pri \
		/opt/qt/mkspecs/features/qt_functions.prf \
		/opt/qt/mkspecs/features/qt_config.prf \
		/opt/qt/mkspecs/features/exclusive_builds.prf \
		/opt/qt/mkspecs/features/default_pre.prf \
		/opt/qt/mkspecs/features/debug.prf \
		/opt/qt/mkspecs/features/default_post.prf \
		/opt/qt/mkspecs/features/serialport.prf \
		/opt/qt/mkspecs/features/shared.prf \
		/opt/qt/mkspecs/features/warn_on.prf \
		/opt/qt/mkspecs/features/qt.prf \
		/opt/qt/mkspecs/features/unix/thread.prf \
		/opt/qt/mkspecs/features/moc.prf \
		/opt/qt/mkspecs/features/resources.prf \
		/opt/qt/mkspecs/features/uic.prf \
		/opt/qt/mkspecs/features/yacc.prf \
		/opt/qt/mkspecs/features/lex.prf \
		/opt/qt/mkspecs/features/include_source_dir.prf \
		/opt/qt/lib/libQtSerialPort.prl \
		/opt/qt/lib/libQtNetwork.prl \
		/opt/qt/lib/libQtCore.prl
	$(QMAKE) -o Makefile Gateway.pro
/opt/qt/mkspecs/common/unix.conf:
/opt/qt/mkspecs/common/linux.conf:
/opt/qt/mkspecs/common/gcc-base.conf:
/opt/qt/mkspecs/common/gcc-base-unix.conf:
/opt/qt/mkspecs/common/g++-base.conf:
/opt/qt/mkspecs/common/g++-unix.conf:
/opt/qt/mkspecs/common/qws.conf:
/opt/qt/mkspecs/qconfig.pri:
/opt/qt/mkspecs/features/qt_functions.prf:
/opt/qt/mkspecs/features/qt_config.prf:
/opt/qt/mkspecs/features/exclusive_builds.prf:
/opt/qt/mkspecs/features/default_pre.prf:
/opt/qt/mkspecs/features/debug.prf:
/opt/qt/mkspecs/features/default_post.prf:
/opt/qt/mkspecs/features/serialport.prf:
/opt/qt/mkspecs/features/shared.prf:
/opt/qt/mkspecs/features/warn_on.prf:
/opt/qt/mkspecs/features/qt.prf:
/opt/qt/mkspecs/features/unix/thread.prf:
/opt/qt/mkspecs/features/moc.prf:
/opt/qt/mkspecs/features/resources.prf:
/opt/qt/mkspecs/features/uic.prf:
/opt/qt/mkspecs/features/yacc.prf:
/opt/qt/mkspecs/features/lex.prf:
/opt/qt/mkspecs/features/include_source_dir.prf:
/opt/qt/lib/libQtSerialPort.prl:
/opt/qt/lib/libQtNetwork.prl:
/opt/qt/lib/libQtCore.prl:
qmake:  FORCE
	@$(QMAKE) -o Makefile Gateway.pro

dist: 
	@$(CHK_DIR_EXISTS) .tmp/Gateway1.0.0 || $(MKDIR) .tmp/Gateway1.0.0 
	$(COPY_FILE) --parents $(SOURCES) $(DIST) .tmp/Gateway1.0.0/ && $(COPY_FILE) --parents tcpgateway.h clientoven.h utils.h abstractdevice.h rs232device.h rs232deviceprivate.h candevice.h .tmp/Gateway1.0.0/ && $(COPY_FILE) --parents main.cpp tcpgateway.cpp clientoven.cpp utils.cpp abstractdevice.cpp rs232device.cpp rs232deviceprivate.cpp candevice.cpp .tmp/Gateway1.0.0/ && (cd `dirname .tmp/Gateway1.0.0` && $(TAR) Gateway1.0.0.tar Gateway1.0.0 && $(COMPRESS) Gateway1.0.0.tar) && $(MOVE) `dirname .tmp/Gateway1.0.0`/Gateway1.0.0.tar.gz . && $(DEL_FILE) -r .tmp/Gateway1.0.0


clean:compiler_clean 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) 
	-$(DEL_FILE) Makefile


check: first

mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_moc_header_make_all: moc_tcpgateway.cpp moc_clientoven.cpp moc_abstractdevice.cpp moc_rs232device.cpp moc_rs232deviceprivate.cpp moc_candevice.cpp
compiler_moc_header_clean:
	-$(DEL_FILE) moc_tcpgateway.cpp moc_clientoven.cpp moc_abstractdevice.cpp moc_rs232device.cpp moc_rs232deviceprivate.cpp moc_candevice.cpp
moc_tcpgateway.cpp: tcpgateway.h
	/opt/qt/bin/moc $(DEFINES) $(INCPATH) tcpgateway.h -o moc_tcpgateway.cpp

moc_clientoven.cpp: utils.h \
		clientoven.h
	/opt/qt/bin/moc $(DEFINES) $(INCPATH) clientoven.h -o moc_clientoven.cpp

moc_abstractdevice.cpp: clientoven.h \
		utils.h \
		abstractdevice.h
	/opt/qt/bin/moc $(DEFINES) $(INCPATH) abstractdevice.h -o moc_abstractdevice.cpp

moc_rs232device.cpp: abstractdevice.h \
		clientoven.h \
		utils.h \
		rs232device.h
	/opt/qt/bin/moc $(DEFINES) $(INCPATH) rs232device.h -o moc_rs232device.cpp

moc_rs232deviceprivate.cpp: utils.h \
		rs232deviceprivate.h
	/opt/qt/bin/moc $(DEFINES) $(INCPATH) rs232deviceprivate.h -o moc_rs232deviceprivate.cpp

moc_candevice.cpp: abstractdevice.h \
		clientoven.h \
		utils.h \
		candevice.h
	/opt/qt/bin/moc $(DEFINES) $(INCPATH) candevice.h -o moc_candevice.cpp

compiler_rcc_make_all:
compiler_rcc_clean:
compiler_image_collection_make_all: qmake_image_collection.cpp
compiler_image_collection_clean:
	-$(DEL_FILE) qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all:
compiler_uic_clean:
compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean: compiler_moc_header_clean 

####### Compile

main.o: main.cpp tcpgateway.h \
		rs232device.h \
		abstractdevice.h \
		clientoven.h \
		utils.h \
		candevice.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o main.o main.cpp

tcpgateway.o: tcpgateway.cpp tcpgateway.h \
		clientoven.h \
		utils.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o tcpgateway.o tcpgateway.cpp

clientoven.o: clientoven.cpp clientoven.h \
		utils.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o clientoven.o clientoven.cpp

utils.o: utils.cpp utils.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o utils.o utils.cpp

abstractdevice.o: abstractdevice.cpp abstractdevice.h \
		clientoven.h \
		utils.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o abstractdevice.o abstractdevice.cpp

rs232device.o: rs232device.cpp rs232device.h \
		abstractdevice.h \
		clientoven.h \
		utils.h \
		rs232deviceprivate.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o rs232device.o rs232device.cpp

rs232deviceprivate.o: rs232deviceprivate.cpp rs232deviceprivate.h \
		utils.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o rs232deviceprivate.o rs232deviceprivate.cpp

candevice.o: candevice.cpp candevice.h \
		abstractdevice.h \
		clientoven.h \
		utils.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o candevice.o candevice.cpp

moc_tcpgateway.o: moc_tcpgateway.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_tcpgateway.o moc_tcpgateway.cpp

moc_clientoven.o: moc_clientoven.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_clientoven.o moc_clientoven.cpp

moc_abstractdevice.o: moc_abstractdevice.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_abstractdevice.o moc_abstractdevice.cpp

moc_rs232device.o: moc_rs232device.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_rs232device.o moc_rs232device.cpp

moc_rs232deviceprivate.o: moc_rs232deviceprivate.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_rs232deviceprivate.o moc_rs232deviceprivate.cpp

moc_candevice.o: moc_candevice.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_candevice.o moc_candevice.cpp

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:

